#include <iostream>
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"

// essentials !!!
#include "FWCore/Framework/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ServiceRegistry/interface/Service.h" 
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "TH1.h"

#include "FWCore/Framework/interface/EDAnalyzer.h"

class Dstar_ccbar : public edm::EDAnalyzer
{

   public:
   
      //
      explicit Dstar_ccbar( const edm::ParameterSet& ) ;
      virtual ~Dstar_ccbar() {} // no need to delete ROOT stuff
                                   // as it'll be deleted upon closing TFile
      
      virtual void analyze( const edm::Event&, const edm::EventSetup& ) ;
      virtual void beginJob() ;
      virtual void endRun( const edm::Run&, const edm::EventSetup& ) ;
      virtual void endJob() ;

   private:
   
     TH1D*       dstarpt ;
     TH1D*       fHist4muMass ;
     TH1D*       fHistZZMass ;
     
}; 

using namespace edm;
using namespace std;
using namespace reco;

Dstar_ccbar::Dstar_ccbar( const ParameterSet& pset )
  : dstarpt(0), fHist4muMass(0), fHistZZMass(0)
{
// actually, pset is NOT in use - we keep it here just for illustratory putposes
}

void Dstar_ccbar::beginJob()
{
  
  Service<TFileService> fs;
  dstarpt = fs->make<TH1D>(  "dstarpt", "Dstar pt", 100,  20., 300. ) ;
  fHist4muMass = fs->make<TH1D>(  "Hist4muMass", "4-mu inv. mass", 100, 170., 210. ) ;
  fHistZZMass  = fs->make<TH1D>(  "HistZZMass",  "ZZ inv. mass",   100, 170., 210. ) ;    
    
  return ;
  
}

void Dstar_ccbar::analyze( const Event& e, const EventSetup& )
{
  
  // here's an example of accessing GenEventInfoProduct
  Handle< GenEventInfoProduct > GenInfoHandle;
  e.getByLabel( "generator", GenInfoHandle );
  double qScale = GenInfoHandle->qScale();
  double pthat = ( GenInfoHandle->hasBinningValues() ? 
                  (GenInfoHandle->binningValues())[0] : 0.0);
//  cout << " qScale = " << qScale << " pthat = " << pthat << endl;
  //
  // this (commented out) code below just exemplifies how to access certain info 
  //
  //double evt_weight1 = GenInfoHandle->weights()[0]; // this is "stanrd Py6 evt weight;
                                                    // corresponds to PYINT1/VINT(97)
  //double evt_weight2 = GenInfoHandle->weights()[1]; // in case you run in CSA mode or otherwise
                                                    // use PYEVWT routine, this will be weight
						    // as returned by PYEVWT, i.e. PYINT1/VINT(99)
  //std::cout << " evt_weight1 = " << evt_weight1 << std::endl;
  //std::cout << " evt_weight2 = " << evt_weight2 << std::endl;
  //double weight = GenInfoHandle->weight();
  //std::cout << " as returned by the weight() method, integrated event weight = " << weight << std::endl;
  
  // here's an example of accessing particles in the event record (HepMCProduct)
  //
  Handle< HepMCProduct > EvtHandle ;
  
  // find initial (unsmeared, unfiltered,...) HepMCProduct
  //
  e.getByLabel( "generator", EvtHandle ) ;
  
  const HepMC::GenEvent* Evt = EvtHandle->GetEvent() ;
  
  // this a pointer - and not an array/vector/... 
  // because this example explicitely assumes
  // that there one and only Higgs in the record
  //
  HepMC::GenVertex* D0DecVtx = 0 ;

  int numberofdstar = 0;
  int numberofd0tokaipai = 0;
 
  
  Handle<GenParticleCollection> genParticles;
  e.getByLabel("genParticles", genParticles);
  cout << "particle number = " << genParticles->size() << endl;


  for(size_t i = 0; i < genParticles->size(); ++ i) {
     const GenParticle & p = (*genParticles)[i];
     int id = p.pdgId();
     int st = p.status();  
     if (abs(id) != 413 || abs(st) != 2)   continue;
     numberofdstar++;
     const Candidate * mom = p.mother();
     double pt = p.pt(), eta = p.eta(), phi = p.phi(), mass = p.mass();
     double vx = p.vx(), vy = p.vy(), vz = p.vz();
     int charge = p.charge();
     int n = p.numberOfDaughters();
     if ( n != 2) continue;
     const Candidate * d0;
     const Candidate * pai;
     const Candidate * paifromd0;
     const Candidate * kaifromd0;
//     for(int j = 0; j < n; ++ j) {
     if (!((p.daughter(0)->pdgId() == 421 && abs( p.daughter(1)->pdgId()) == 211) ||( abs(p.daughter(0)->pdgId()) == 221 &&  p.daughter(1)->pdgId() == 421)))   
           continue;
     if ( p.daughter(0)->pdgId() == 421 && abs( p.daughter(1)->pdgId()) == 211 )   { d0 = p.daughter(0); pai = p.daughter(1); }
     if ( abs(p.daughter(0)->pdgId()) == 221 &&  p.daughter(1)->pdgId() == 421 )   { d0 = p.daughter(1); pai = p.daughter(0); }
//     const Candidate * d = p.daughter(1);
//     int dauId = d->pdgId();
//     if (dauId == 421)   {
      cout << "Dstar to pai d0" << endl;
      cout << "D0 daughter number" << d0->numberOfDaughters()<<endl;
      if (d0->status() == 2 && d0->numberOfDaughters() != 2) continue;
      if (!((abs(d0->daughter(0)->pdgId())==321&&abs(d0->daughter(1)->pdgId())==211)||(abs(d0->daughter(0)->pdgId())==211&&abs(d0->daughter(1)->pdgId())==321)))
           continue;
      if(d0->daughter(0)->pdgId() * d0->daughter(1)->pdgId() > 0)   continue;
      cout << "D0 to kai pai" << endl;
        

//       }
       // . . . 
//     }
     // . . . 
   }
 
  // find the 1st vertex with outgoing Higgs 
  // and get Higgs decay vertex from there;
  //
  // in principal, one can look for the vertex 
  // with incoming Higgs as well...
  //

   cout << "number of Dstar =====" << numberofdstar << endl;
  
   
   return ;
   
}

void Dstar_ccbar::endRun( const edm::Run& r, const edm::EventSetup& )
{

   return;

}


void Dstar_ccbar::endJob()
{
   
   return ;
}
 
typedef Dstar_ccbar Dstar_ccbar_Analyzer;
DEFINE_FWK_MODULE(Dstar_ccbar_Analyzer);
